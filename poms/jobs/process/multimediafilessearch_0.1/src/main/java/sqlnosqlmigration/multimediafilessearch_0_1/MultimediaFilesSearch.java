// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sqlnosqlmigration.multimediafilessearch_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MultimediaFilesSearch Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class MultimediaFilesSearch implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MultimediaFilesSearch";
	private final String projectName = "SQLNOSQLMIGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MultimediaFilesSearch.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MultimediaFilesSearch.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMongoDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBGridFSList_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBGridFSList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBGridFSProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBGridFSList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBGridFSList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBGridFSList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBGridFSList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBGridFSList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBGridFSList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1,
						mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase("users");

				globalMap.put("mongo_tMongoDBConnection_1",
						mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1",
						db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMongoDBConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMongoDBGridFSList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class By_nameStruct implements
			routines.system.IPersistableRow<By_nameStruct> {
		final static byte[] commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		static byte[] commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public Long chunkSize;

		public Long getChunkSize() {
			return this.chunkSize;
		}

		public java.util.Date uploadDate;

		public java.util.Date getUploadDate() {
			return this.uploadDate;
		}

		public Long length;

		public Long getLength() {
			return this.length;
		}

		public Object metadata;

		public Object getMetadata() {
			return this.metadata;
		}

		public String md5;

		public String getMd5() {
			return this.md5;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final By_nameStruct other = (By_nameStruct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(By_nameStruct other) {

			other._id = this._id;
			other.filename = this.filename;
			other.chunkSize = this.chunkSize;
			other.uploadDate = this.uploadDate;
			other.length = this.length;
			other.metadata = this.metadata;
			other.md5 = this.md5;

		}

		public void copyKeysDataTo(By_nameStruct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length) {
					if (length < 1024
							&& commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length == 0) {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[1024];
					} else {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length);
				strReturn = new String(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.filename = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.chunkSize = null;
					} else {
						this.chunkSize = dis.readLong();
					}

					this.uploadDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.length = null;
					} else {
						this.length = dis.readLong();
					}

					this.metadata = (Object) dis.readObject();

					this.md5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.filename, dos);

				// Long

				if (this.chunkSize == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.chunkSize);
				}

				// java.util.Date

				writeDate(this.uploadDate, dos);

				// Long

				if (this.length == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.length);
				}

				// Object

				dos.writeObject(this.metadata);

				// String

				writeString(this.md5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",filename=" + filename);
			sb.append(",chunkSize=" + String.valueOf(chunkSize));
			sb.append(",uploadDate=" + String.valueOf(uploadDate));
			sb.append(",length=" + String.valueOf(length));
			sb.append(",metadata=" + String.valueOf(metadata));
			sb.append(",md5=" + md5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(By_nameStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class By_dateStruct implements
			routines.system.IPersistableRow<By_dateStruct> {
		final static byte[] commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		static byte[] commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public Long chunkSize;

		public Long getChunkSize() {
			return this.chunkSize;
		}

		public java.util.Date uploadDate;

		public java.util.Date getUploadDate() {
			return this.uploadDate;
		}

		public Long length;

		public Long getLength() {
			return this.length;
		}

		public Object metadata;

		public Object getMetadata() {
			return this.metadata;
		}

		public String md5;

		public String getMd5() {
			return this.md5;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final By_dateStruct other = (By_dateStruct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(By_dateStruct other) {

			other._id = this._id;
			other.filename = this.filename;
			other.chunkSize = this.chunkSize;
			other.uploadDate = this.uploadDate;
			other.length = this.length;
			other.metadata = this.metadata;
			other.md5 = this.md5;

		}

		public void copyKeysDataTo(By_dateStruct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length) {
					if (length < 1024
							&& commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length == 0) {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[1024];
					} else {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length);
				strReturn = new String(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.filename = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.chunkSize = null;
					} else {
						this.chunkSize = dis.readLong();
					}

					this.uploadDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.length = null;
					} else {
						this.length = dis.readLong();
					}

					this.metadata = (Object) dis.readObject();

					this.md5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.filename, dos);

				// Long

				if (this.chunkSize == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.chunkSize);
				}

				// java.util.Date

				writeDate(this.uploadDate, dos);

				// Long

				if (this.length == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.length);
				}

				// Object

				dos.writeObject(this.metadata);

				// String

				writeString(this.md5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",filename=" + filename);
			sb.append(",chunkSize=" + String.valueOf(chunkSize));
			sb.append(",uploadDate=" + String.valueOf(uploadDate));
			sb.append(",length=" + String.valueOf(length));
			sb.append(",metadata=" + String.valueOf(metadata));
			sb.append(",md5=" + md5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(By_dateStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class By_sizeStruct implements
			routines.system.IPersistableRow<By_sizeStruct> {
		final static byte[] commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		static byte[] commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public Long chunkSize;

		public Long getChunkSize() {
			return this.chunkSize;
		}

		public java.util.Date uploadDate;

		public java.util.Date getUploadDate() {
			return this.uploadDate;
		}

		public Long length;

		public Long getLength() {
			return this.length;
		}

		public Object metadata;

		public Object getMetadata() {
			return this.metadata;
		}

		public String md5;

		public String getMd5() {
			return this.md5;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final By_sizeStruct other = (By_sizeStruct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(By_sizeStruct other) {

			other._id = this._id;
			other.filename = this.filename;
			other.chunkSize = this.chunkSize;
			other.uploadDate = this.uploadDate;
			other.length = this.length;
			other.metadata = this.metadata;
			other.md5 = this.md5;

		}

		public void copyKeysDataTo(By_sizeStruct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length) {
					if (length < 1024
							&& commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length == 0) {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[1024];
					} else {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length);
				strReturn = new String(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.filename = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.chunkSize = null;
					} else {
						this.chunkSize = dis.readLong();
					}

					this.uploadDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.length = null;
					} else {
						this.length = dis.readLong();
					}

					this.metadata = (Object) dis.readObject();

					this.md5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.filename, dos);

				// Long

				if (this.chunkSize == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.chunkSize);
				}

				// java.util.Date

				writeDate(this.uploadDate, dos);

				// Long

				if (this.length == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.length);
				}

				// Object

				dos.writeObject(this.metadata);

				// String

				writeString(this.md5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",filename=" + filename);
			sb.append(",chunkSize=" + String.valueOf(chunkSize));
			sb.append(",uploadDate=" + String.valueOf(uploadDate));
			sb.append(",length=" + String.valueOf(length));
			sb.append(",metadata=" + String.valueOf(metadata));
			sb.append(",md5=" + md5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(By_sizeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];
		static byte[] commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[0];

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public Long chunkSize;

		public Long getChunkSize() {
			return this.chunkSize;
		}

		public java.util.Date uploadDate;

		public java.util.Date getUploadDate() {
			return this.uploadDate;
		}

		public Long length;

		public Long getLength() {
			return this.length;
		}

		public Object metadata;

		public Object getMetadata() {
			return this.metadata;
		}

		public String md5;

		public String getMd5() {
			return this.md5;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length) {
					if (length < 1024
							&& commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch.length == 0) {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[1024];
					} else {
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length);
				strReturn = new String(
						commonByteArray_SQLNOSQLMIGRATION_MultimediaFilesSearch,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SQLNOSQLMIGRATION_MultimediaFilesSearch) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.filename = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.chunkSize = null;
					} else {
						this.chunkSize = dis.readLong();
					}

					this.uploadDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.length = null;
					} else {
						this.length = dis.readLong();
					}

					this.metadata = (Object) dis.readObject();

					this.md5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.filename, dos);

				// Long

				if (this.chunkSize == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.chunkSize);
				}

				// java.util.Date

				writeDate(this.uploadDate, dos);

				// Long

				if (this.length == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.length);
				}

				// Object

				dos.writeObject(this.metadata);

				// String

				writeString(this.md5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",filename=" + filename);
			sb.append(",chunkSize=" + String.valueOf(chunkSize));
			sb.append(",uploadDate=" + String.valueOf(uploadDate));
			sb.append(",length=" + String.valueOf(length));
			sb.append(",metadata=" + String.valueOf(metadata));
			sb.append(",md5=" + md5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBGridFSList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBGridFSList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				By_nameStruct By_name = new By_nameStruct();
				By_dateStruct By_date = new By_dateStruct();
				By_sizeStruct By_size = new By_sizeStruct();

				/**
				 * [tMongoDBGridFSList_1 begin ] start
				 */

				int NB_ITERATE_tMongoDBGridFSProperties_1 = 0; // for statistics

				ok_Hash.put("tMongoDBGridFSList_1", false);
				start_Hash.put("tMongoDBGridFSList_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBGridFSList_1";

				int tos_count_tMongoDBGridFSList_1 = 0;

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				int nb_line_tMongoDBGridFSList_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBGridFSList_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBGridFSList_1 = null;

				mongo_tMongoDBGridFSList_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBGridFSList_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.gridfs.GridFSBucket gridfs_tMongoDBGridFSList_1 = com.mongodb.client.gridfs.GridFSBuckets
						.create(db_tMongoDBGridFSList_1, "catPics");
				org.bson.Document gridFSQuery_tMongoDBGridFSList_1 = org.bson.Document
						.parse("{}");
				org.bson.Document sortField_tMongoDBGridFSList_1 = new org.bson.Document(
						"filename", 1);
				com.mongodb.client.MongoCursor<com.mongodb.client.gridfs.model.GridFSFile> filesCursor_tMongoDBGridFSList_1 = gridfs_tMongoDBGridFSList_1
						.find(gridFSQuery_tMongoDBGridFSList_1)
						.sort(sortField_tMongoDBGridFSList_1).iterator();

				while (filesCursor_tMongoDBGridFSList_1.hasNext()) {
					com.mongodb.client.gridfs.model.GridFSFile file_tMongoDBGridFSList_1 = filesCursor_tMongoDBGridFSList_1
							.next();
					nb_line_tMongoDBGridFSList_1++;
					globalMap.put("tMongoDBGridFSList_1_CURRENT_FILEID",
							file_tMongoDBGridFSList_1.getObjectId().toString());
					globalMap.put("tMongoDBGridFSList_1_CURRENT_FILENAME",
							file_tMongoDBGridFSList_1.getFilename());
					globalMap.put(
							"tMongoDBGridFSList_1_CURRENT_FILEUPLOADDATE",
							file_tMongoDBGridFSList_1.getUploadDate());
					globalMap.put("tMongoDBGridFSList_1_CURRENT_FILELENGTH",
							file_tMongoDBGridFSList_1.getLength());
					globalMap.put("tMongoDBGridFSList_1_CURRENT_FILEMD5",
							file_tMongoDBGridFSList_1.getMD5());

					/**
					 * [tMongoDBGridFSList_1 begin ] stop
					 */

					/**
					 * [tMongoDBGridFSList_1 main ] start
					 */

					currentComponent = "tMongoDBGridFSList_1";

					tos_count_tMongoDBGridFSList_1++;

					/**
					 * [tMongoDBGridFSList_1 main ] stop
					 */

					/**
					 * [tMongoDBGridFSList_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBGridFSList_1";

					/**
					 * [tMongoDBGridFSList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tMongoDBGridFSProperties_1++;

					if (execStat) {
						runStat.updateStatOnConnection("By_name", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("By_date", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("By_size", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec"
								+ NB_ITERATE_tMongoDBGridFSProperties_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());

					currentComponent = "tLogRow_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("By_name"
									+ iterateId, 0, 0);

						}
					}

					int tos_count_tLogRow_1 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
					java.io.PrintStream consoleOut_tLogRow_1 = null;

					StringBuilder strBuffer_tLogRow_1 = null;
					int nb_line_tLogRow_1 = 0;
					// /////////////////////

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tLogRow_2 begin ] start
					 */

					ok_Hash.put("tLogRow_2", false);
					start_Hash.put("tLogRow_2", System.currentTimeMillis());

					currentComponent = "tLogRow_2";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("By_date"
									+ iterateId, 0, 0);

						}
					}

					int tos_count_tLogRow_2 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
					java.io.PrintStream consoleOut_tLogRow_2 = null;

					StringBuilder strBuffer_tLogRow_2 = null;
					int nb_line_tLogRow_2 = 0;
					// /////////////////////

					/**
					 * [tLogRow_2 begin ] stop
					 */

					/**
					 * [tLogRow_3 begin ] start
					 */

					ok_Hash.put("tLogRow_3", false);
					start_Hash.put("tLogRow_3", System.currentTimeMillis());

					currentComponent = "tLogRow_3";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("By_size"
									+ iterateId, 0, 0);

						}
					}

					int tos_count_tLogRow_3 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
					java.io.PrintStream consoleOut_tLogRow_3 = null;

					StringBuilder strBuffer_tLogRow_3 = null;
					int nb_line_tLogRow_3 = 0;
					// /////////////////////

					/**
					 * [tLogRow_3 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row1" + iterateId,
									0, 0);

						}
					}

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					By_nameStruct By_name_tmp = new By_nameStruct();
					By_dateStruct By_date_tmp = new By_dateStruct();
					By_sizeStruct By_size_tmp = new By_sizeStruct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tMongoDBGridFSProperties_1 begin ] start
					 */

					ok_Hash.put("tMongoDBGridFSProperties_1", false);
					start_Hash.put("tMongoDBGridFSProperties_1",
							System.currentTimeMillis());

					currentComponent = "tMongoDBGridFSProperties_1";

					int tos_count_tMongoDBGridFSProperties_1 = 0;

					java.util.logging.Logger.getLogger("org.mongodb.driver")
							.setLevel(java.util.logging.Level.SEVERE);
					int nb_line_tMongoDBGridFSProperties_1 = 0;

					com.mongodb.MongoClient mongo_tMongoDBGridFSProperties_1 = null;
					com.mongodb.client.MongoDatabase db_tMongoDBGridFSProperties_1 = null;

					mongo_tMongoDBGridFSProperties_1 = (com.mongodb.MongoClient) globalMap
							.get("mongo_tMongoDBConnection_1");
					db_tMongoDBGridFSProperties_1 = (com.mongodb.client.MongoDatabase) globalMap
							.get("db_tMongoDBConnection_1");

					com.mongodb.client.gridfs.GridFSBucket gridfs_tMongoDBGridFSProperties_1 = com.mongodb.client.gridfs.GridFSBuckets
							.create(db_tMongoDBGridFSProperties_1, "catPics");

					org.bson.Document gridFSQuery_tMongoDBGridFSProperties_1 = new org.bson.Document(
							"filename",
							((String) globalMap
									.get("tMongoDBGridFSList_1_CURRENT_FILENAME")));

					com.mongodb.client.gridfs.GridFSFindIterable gridfsFiles_tMongoDBGridFSProperties_1 = gridfs_tMongoDBGridFSProperties_1
							.find(gridFSQuery_tMongoDBGridFSProperties_1);

					for (com.mongodb.client.gridfs.model.GridFSFile file : gridfsFiles_tMongoDBGridFSProperties_1) {
						nb_line_tMongoDBGridFSProperties_1++;
						Object valueObj_tMongoDBGridFSProperties_1 = null;

						valueObj_tMongoDBGridFSProperties_1 = file
								.getObjectId();

						if (valueObj_tMongoDBGridFSProperties_1 != null
								&& valueObj_tMongoDBGridFSProperties_1
										.toString().length() > 0) {

							row1._id = valueObj_tMongoDBGridFSProperties_1
									.toString();

						}

						valueObj_tMongoDBGridFSProperties_1 = file
								.getFilename();

						if (valueObj_tMongoDBGridFSProperties_1 != null
								&& valueObj_tMongoDBGridFSProperties_1
										.toString().length() > 0) {

							row1.filename = valueObj_tMongoDBGridFSProperties_1
									.toString();

						}

						valueObj_tMongoDBGridFSProperties_1 = file
								.getChunkSize();

						if (valueObj_tMongoDBGridFSProperties_1 != null
								&& valueObj_tMongoDBGridFSProperties_1
										.toString().length() > 0) {

							if (valueObj_tMongoDBGridFSProperties_1.getClass()
									.equals(Double.class)) {
								row1.chunkSize = ParserUtils.parseTo_Double(
										valueObj_tMongoDBGridFSProperties_1
												.toString()).longValue();
							} else {
								row1.chunkSize = ParserUtils
										.parseTo_Long(valueObj_tMongoDBGridFSProperties_1
												.toString());
							}

						}

						valueObj_tMongoDBGridFSProperties_1 = file
								.getUploadDate();

						if (valueObj_tMongoDBGridFSProperties_1 != null
								&& valueObj_tMongoDBGridFSProperties_1
										.toString().length() > 0) {

							row1.uploadDate = ParserUtils
									.parseTo_Date(
											(java.util.Date) valueObj_tMongoDBGridFSProperties_1,
											"yyyy-MM-dd HH:mm:ss");

						}

						valueObj_tMongoDBGridFSProperties_1 = file.getLength();

						if (valueObj_tMongoDBGridFSProperties_1 != null
								&& valueObj_tMongoDBGridFSProperties_1
										.toString().length() > 0) {

							if (valueObj_tMongoDBGridFSProperties_1.getClass()
									.equals(Double.class)) {
								row1.length = ParserUtils.parseTo_Double(
										valueObj_tMongoDBGridFSProperties_1
												.toString()).longValue();
							} else {
								row1.length = ParserUtils
										.parseTo_Long(valueObj_tMongoDBGridFSProperties_1
												.toString());
							}

						}

						valueObj_tMongoDBGridFSProperties_1 = file
								.getMetadata();

						row1.metadata = valueObj_tMongoDBGridFSProperties_1;

						valueObj_tMongoDBGridFSProperties_1 = file.getMD5();

						if (valueObj_tMongoDBGridFSProperties_1 != null
								&& valueObj_tMongoDBGridFSProperties_1
										.toString().length() > 0) {

							row1.md5 = valueObj_tMongoDBGridFSProperties_1
									.toString();

						}

						/**
						 * [tMongoDBGridFSProperties_1 begin ] stop
						 */

						/**
						 * [tMongoDBGridFSProperties_1 main ] start
						 */

						currentComponent = "tMongoDBGridFSProperties_1";

						tos_count_tMongoDBGridFSProperties_1++;

						/**
						 * [tMongoDBGridFSProperties_1 main ] stop
						 */

						/**
						 * [tMongoDBGridFSProperties_1 process_data_begin ]
						 * start
						 */

						currentComponent = "tMongoDBGridFSProperties_1";

						/**
						 * [tMongoDBGridFSProperties_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							By_name = null;
							By_date = null;
							By_size = null;

							// # Output table : 'By_name'
							// # Filter conditions
							if (

							row1.filename.equals("2.jpg")

							) {
								By_name_tmp._id = row1._id;
								By_name_tmp.filename = row1.filename;
								By_name_tmp.chunkSize = row1.chunkSize;
								By_name_tmp.uploadDate = row1.uploadDate;
								By_name_tmp.length = row1.length;
								By_name_tmp.metadata = row1.metadata;
								By_name_tmp.md5 = row1.md5;
								By_name = By_name_tmp;
							} // closing filter/reject

							// # Output table : 'By_date'
							// # Filter conditions
							if (

							TalendDate
									.formatDate("yyyy-MM-dd", row1.uploadDate)
									.equals("2019-06-20")

							) {
								By_date_tmp._id = row1._id;
								By_date_tmp.filename = row1.filename;
								By_date_tmp.chunkSize = row1.chunkSize;
								By_date_tmp.uploadDate = row1.uploadDate;
								By_date_tmp.length = row1.length;
								By_date_tmp.metadata = row1.metadata;
								By_date_tmp.md5 = row1.md5;
								By_date = By_date_tmp;
							} // closing filter/reject

							// # Output table : 'By_size'
							// # Filter conditions
							if (

							row1.length > 10000

							) {
								By_size_tmp._id = row1._id;
								By_size_tmp.filename = row1.filename;
								By_size_tmp.chunkSize = row1.chunkSize;
								By_size_tmp.uploadDate = row1.uploadDate;
								By_size_tmp.length = row1.length;
								By_size_tmp.metadata = row1.metadata;
								By_size_tmp.md5 = row1.md5;
								By_size = By_size_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "By_name"
						if (By_name != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// By_name
							// By_name

							if (execStat) {
								runStat.updateStatOnConnection("By_name"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							strBuffer_tLogRow_1 = new StringBuilder();

							if (By_name._id != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(By_name._id));

							} //

							strBuffer_tLogRow_1.append("|");

							if (By_name.filename != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(By_name.filename));

							} //

							strBuffer_tLogRow_1.append("|");

							if (By_name.chunkSize != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(By_name.chunkSize));

							} //

							strBuffer_tLogRow_1.append("|");

							if (By_name.uploadDate != null) { //

								strBuffer_tLogRow_1.append(FormatterUtils
										.format_Date(By_name.uploadDate,
												"yyyy-MM-dd HH:mm:ss"));

							} //

							strBuffer_tLogRow_1.append("|");

							if (By_name.length != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(By_name.length));

							} //

							strBuffer_tLogRow_1.append("|");

							if (By_name.metadata != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(By_name.metadata));

							} //

							strBuffer_tLogRow_1.append("|");

							if (By_name.md5 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(By_name.md5));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "By_name"

						// Start of branch "By_date"
						if (By_date != null) {

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							// By_date
							// By_date

							if (execStat) {
								runStat.updateStatOnConnection("By_date"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							strBuffer_tLogRow_2 = new StringBuilder();

							if (By_date._id != null) { //

								strBuffer_tLogRow_2.append(String
										.valueOf(By_date._id));

							} //

							strBuffer_tLogRow_2.append("|");

							if (By_date.filename != null) { //

								strBuffer_tLogRow_2.append(String
										.valueOf(By_date.filename));

							} //

							strBuffer_tLogRow_2.append("|");

							if (By_date.chunkSize != null) { //

								strBuffer_tLogRow_2.append(String
										.valueOf(By_date.chunkSize));

							} //

							strBuffer_tLogRow_2.append("|");

							if (By_date.uploadDate != null) { //

								strBuffer_tLogRow_2.append(FormatterUtils
										.format_Date(By_date.uploadDate,
												"yyyy-MM-dd HH:mm:ss"));

							} //

							strBuffer_tLogRow_2.append("|");

							if (By_date.length != null) { //

								strBuffer_tLogRow_2.append(String
										.valueOf(By_date.length));

							} //

							strBuffer_tLogRow_2.append("|");

							if (By_date.metadata != null) { //

								strBuffer_tLogRow_2.append(String
										.valueOf(By_date.metadata));

							} //

							strBuffer_tLogRow_2.append("|");

							if (By_date.md5 != null) { //

								strBuffer_tLogRow_2.append(String
										.valueOf(By_date.md5));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_2 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_2);
							}
							consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
									.toString());
							consoleOut_tLogRow_2.flush();
							nb_line_tLogRow_2++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tLogRow_2 process_data_begin ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_2 process_data_end ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_end ] stop
							 */

						} // End of branch "By_date"

						// Start of branch "By_size"
						if (By_size != null) {

							/**
							 * [tLogRow_3 main ] start
							 */

							currentComponent = "tLogRow_3";

							// By_size
							// By_size

							if (execStat) {
								runStat.updateStatOnConnection("By_size"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							strBuffer_tLogRow_3 = new StringBuilder();

							if (By_size._id != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(By_size._id));

							} //

							strBuffer_tLogRow_3.append("|");

							if (By_size.filename != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(By_size.filename));

							} //

							strBuffer_tLogRow_3.append("|");

							if (By_size.chunkSize != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(By_size.chunkSize));

							} //

							strBuffer_tLogRow_3.append("|");

							if (By_size.uploadDate != null) { //

								strBuffer_tLogRow_3.append(FormatterUtils
										.format_Date(By_size.uploadDate,
												"yyyy-MM-dd HH:mm:ss"));

							} //

							strBuffer_tLogRow_3.append("|");

							if (By_size.length != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(By_size.length));

							} //

							strBuffer_tLogRow_3.append("|");

							if (By_size.metadata != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(By_size.metadata));

							} //

							strBuffer_tLogRow_3.append("|");

							if (By_size.md5 != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(By_size.md5));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_3 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_3);
							}
							consoleOut_tLogRow_3.println(strBuffer_tLogRow_3
									.toString());
							consoleOut_tLogRow_3.flush();
							nb_line_tLogRow_3++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_3++;

							/**
							 * [tLogRow_3 main ] stop
							 */

							/**
							 * [tLogRow_3 process_data_begin ] start
							 */

							currentComponent = "tLogRow_3";

							/**
							 * [tLogRow_3 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_3 process_data_end ] start
							 */

							currentComponent = "tLogRow_3";

							/**
							 * [tLogRow_3 process_data_end ] stop
							 */

						} // End of branch "By_size"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tMongoDBGridFSProperties_1 process_data_end ] start
						 */

						currentComponent = "tMongoDBGridFSProperties_1";

						/**
						 * [tMongoDBGridFSProperties_1 process_data_end ] stop
						 */

						/**
						 * [tMongoDBGridFSProperties_1 end ] start
						 */

						currentComponent = "tMongoDBGridFSProperties_1";

					}

					globalMap.put("tMongoDBGridFSProperties_1_NB_LINE",
							nb_line_tMongoDBGridFSProperties_1);

					ok_Hash.put("tMongoDBGridFSProperties_1", true);
					end_Hash.put("tMongoDBGridFSProperties_1",
							System.currentTimeMillis());

					/**
					 * [tMongoDBGridFSProperties_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row1" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

					// ////
					// ////
					globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

					// /////////////////////

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("By_name"
									+ iterateId, 2, 0);
						}
					}

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tLogRow_2 end ] start
					 */

					currentComponent = "tLogRow_2";

					// ////
					// ////
					globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

					// /////////////////////

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("By_date"
									+ iterateId, 2, 0);
						}
					}

					ok_Hash.put("tLogRow_2", true);
					end_Hash.put("tLogRow_2", System.currentTimeMillis());

					/**
					 * [tLogRow_2 end ] stop
					 */

					/**
					 * [tLogRow_3 end ] start
					 */

					currentComponent = "tLogRow_3";

					// ////
					// ////
					globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

					// /////////////////////

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("By_size"
									+ iterateId, 2, 0);
						}
					}

					ok_Hash.put("tLogRow_3", true);
					end_Hash.put("tLogRow_3", System.currentTimeMillis());

					/**
					 * [tLogRow_3 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec"
								+ NB_ITERATE_tMongoDBGridFSProperties_1);
					}

					/**
					 * [tMongoDBGridFSList_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBGridFSList_1";

					/**
					 * [tMongoDBGridFSList_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBGridFSList_1 end ] start
					 */

					currentComponent = "tMongoDBGridFSList_1";

				}

				globalMap.put("tMongoDBGridFSList_1_NB_LINE",
						nb_line_tMongoDBGridFSList_1);

				ok_Hash.put("tMongoDBGridFSList_1", true);
				end_Hash.put("tMongoDBGridFSList_1", System.currentTimeMillis());

				/**
				 * [tMongoDBGridFSList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBGridFSList_1 finally ] start
				 */

				currentComponent = "tMongoDBGridFSList_1";

				/**
				 * [tMongoDBGridFSList_1 finally ] stop
				 */

				/**
				 * [tMongoDBGridFSProperties_1 finally ] start
				 */

				currentComponent = "tMongoDBGridFSProperties_1";

				/**
				 * [tMongoDBGridFSProperties_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBGridFSList_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MultimediaFilesSearch MultimediaFilesSearchClass = new MultimediaFilesSearch();

		int exitCode = MultimediaFilesSearchClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MultimediaFilesSearch.class
					.getClassLoader().getResourceAsStream(
							"sqlnosqlmigration/multimediafilessearch_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = MultimediaFilesSearch.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMongoDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMongoDBConnection_1) {
			globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", -1);

			e_tMongoDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : MultimediaFilesSearch");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 88752 characters generated by Talend Open Studio for Big Data on the 26 juin
 * 2019 22:16:12 WET
 ************************************************************************************************/
